/*
You are given two strings s and t.
String t is generated by random shuffling string s and then add one more letter at a random position.
Return the letter that was added to t.

Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.

Example 2:
Input: s = "", t = "y"
Output: "y"
 
Constraints:
0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.
*/

//1) Sum Difference Solution
//Time Complexity: O(n)
//Space Complexity: O(1)

class Solution {
public:
	char findTheDifference(string s, string t) {
		int sum1 = 0;
		int sum2 = t[s.size()];
		for(int i = 0; i < s.length(); i++){
			sum1 += s[i];
			sum2 += t[i];
		}
		return char(abs(sum2 - sum1));
	}
};

//2) XOR Solution
//Time Complexity: O(n)
//Space Complexity: O(1)

class Solution {
public:
	char findTheDifference(string s, string t) {
		char res = t[s.size()];
		for(int i = 0; i < s.size(); i++){
			res ^= s[i] ^ t[i];
		}
		return res;
	}
};

//3) Hashmap Solution
//Time Complexity: O(n)
//Space Complexity: O(n)

class Solution {
public:
	char findTheDifference(string s, string t) {
		unordered_map<char, int> um;
		for(int i = 0; i < t.size(); i++){
			um[t[i]]++;
		}
		for(int i = 0; i < s.size(); i++){
			um[s[i]]--;
		}
		for(auto i : um){
			if(i.second == 1){
				return i.first;
			}
		}
		return 'a'; // dummy character
	 }
};

//4) Sorting Solution
//Time Complexity: O(nlogn)
//Space Complexity: O(1)

class Solution {
public:
	char findTheDifference(string s, string t) {
		sort(s.begin(), s.end());
		sort(t.begin(), t.end());
		int i = 0;
		while(i < s.size()){
			if(s[i] != t[i]){
				return t[i];
			}
			i++;
		}
		return t[s.size()];
	 }
};
